name: 'Deploy Terraform'

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

# Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

# These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    env:
      # this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
      # TF vars
      TF_VAR_location: ${{ secrets.TF_VAR_location }}
      TF_VAR_environment: ${{ secrets.TF_VAR_environment }}
      TF_VAR_firewall_policy_resource_id: ${{ secrets.TF_VAR_firewall_policy_resource_id }}
      TF_VAR_rule_collection_group_name: ${{ secrets.TF_VAR_rule_collection_group_name }}
      TF_VAR_rule_collection_group_priority: ${{ secrets.TF_VAR_rule_collection_group_priority }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Plan changes
    - name: Terraform Plan
      run: terraform plan -out main.tfplan

    # Apply changes
    - name: Terraform Apply
      run: terraform apply -auto-approve main.tfplan